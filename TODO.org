* Mercury web to Haskell
* try something simpler (in mercury?)
type Graph = Map Int (Set Int)
data Query = QInt Int
   |  QHasChild Query
   |  QIntersect [Query]  |  QUnion [Query]
   |  QNot Query
   |  QVar String
* fix rslt-haskell
** break Query into subtypes
 Query = Positive PQuery | Negative NQuery | QVar String
** Why not mix positive and negative queries in QIntersect?
 e.g. << everything that has "dog" in it and does not use the "is" template >>
** QHasInRoles are not necessarily positive
*** example
 (HasInRoles [ (RoleMember 1, QVar "a")
             , (RoleMember 2, QVar "b") ]
** how to search a QHasInRoles
 The return type has to be three things:
   ( Maybe (Set Addr)
   , Subst
   , Set (non-positive Query) )
 If the QHasInRoles is not positive, then
   the first is Nothing,
   the second is empty,
   and the third is every (role, query) pair.
 If it is positive, then
   if it is possible:
     the Maybe (Set Addr) comes from the positive queries,
     the Subst is whatever the QVars in it imply,
     and the Set (non-posotive Query) is empty, because 
       all negative Queries can be tested against the Maybe Set.
   if it is not possible:
     it is because the Subst could not unify with component Substs
