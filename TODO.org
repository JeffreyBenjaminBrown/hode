* roadmap|pressing (duplicative)
** transitivity, order
** reduce redunddancy in views
** update
* TODO move the functions in test_nested_hEval
And add the rest of the closure of the set they generate.
Maybe to Hode.UI.NoUI
* TODO reify these tests
** trr (fails)
/a 0 #< 1
/a 1 #< 2
/a 2 #< 3
/f /trr (/it= 0 | 2) #< 1
* PIFALLs
** PITFALL: varTestlike ForSomes do not store what they find in the Subst
unlike testlike and findlike queries
** PITFALL: Each mapping in a CondElts can be represented many ways, depending on whether they key is included.
The current idiom is to leave the key out. But -- you could describe a CondElts this way:
 x=1 if (a=1    ) or (b=1    )
or equivalently, this way:
 x=1 if (a=1,x=1) or (b=1,x=1)
or this way:
 x=1 if (a=1    ) or (b=1,x=1)
etc.
** PITFALL: The empty set is nonsense in a CondElts
type CondElts = Map Elt (Set Subst)
  -- ^ Uses `Set` because multiple `Subst`s might obtain the same `Elt`.
  -- PITFALL: If Elt is possible without any other bindings, then
  -- the `Set` should include `M.empty`. If the `Set` is `S.empty`,
  -- it is as if that `Elt` is not in the `Map`.
** PITFALL: Don't let keys collide in a CondElts
If a=1 or a=2 can both lead to b=1, it's tempting to write this:
  (p :: Possible) =
    M.fromList [ (a, ...)
               , (b, M.fromList [ (1, S.singleton $ M.singleton a 1)
                                , (1, S.singleton $ M.singleton a 2) ] ) ]
when it ought to be this:
  (p :: Possible) =
    M.fromList [ (a, ...)
               , (b, M.fromList [ (1, S.fromList [ M.singleton a 1
                                                 , M.singleton a 2 ] ) ] ) ]
** PITFALL : mkVTestIO' : naming error => silent failure
see the comment leading its definition
* might come back to haunt me
** pExprIsSpecific should address PDiff, PAnd, POr
*** where it is used
 In pRelToHExpr, only specific things can be converted.
 In pMapToHMap, only specific things are retained.
*** how to do it, I think
 if anything in a POr is not specific, then it is not
 if anything in a PAnd is specific, then it is
 if both parts of a Diff are specific, then it is
   Theoretically, the part being subtracted could be vague.
   But that's not how it's implemented -- both parts have to be found,
   then the one is subtracted from the other.
* video
Use screenkey to show key presses:
   https://gitlab.com/wavexx/screenkey#installation-and-basic-usage
and SimpleScreenRecorder.
Audio interface: remember to select both input and output devices.
* user-friendliness
** insertion list
*** plan
**** data St = ...
+  , _insertionBuffer :: Buffer
**** initially, just add the final result of insertions
**** then refactor insertion so it returns the full history of added things
*** complications
(1) inserting a compound expression inserts subexpressions
(2) don't record insertion if it already existed
** can insertHosts_atFocus when they're already there
** document the precedence order of the language
and mention that you can use parens liberally to make it more obvious
** show path to here
(Not a big deal because the cursor path is remembered.)
Add a toggleable window above the Results window.
** safer open and save
To write, first run `git status`.
If anything is modified, ask "are you sure? Your repo has uncommitted changes; saving this data might clobber them."

If it's not a repo, ask, "Are you sure you don't want to turn that data into a Git repo first?"
* coder-friendliness
** wart: HExpr and PExpr are complex and nearly isomorphic
** wart: RsltViewTree is not natural
*** the root
The root is supposed to only be a Query,
but that is permitted elsewhere.
The root information is(will be) duplicated by the buffer.
*** the alternation is not enforced
It should be that each ViewResult can only have a Host or Members as a child,
and vice-versa.
* TODO views, clean them
** highlight not everywhere
** too much space
This might require a strategy similar to the use of the `Parens`
type in `Rslt.Show`.
** represent, render the columns
*** Currently, each row is rendered separately, without considering others.
*** The right way would be
compute the max (across all rows) width of each column first,
and pad each row's column-cells to match.
*** Requires undoing commit 2689a4d697ea87be4817a20917f21e447209210a
** color hashes in grouping nodes
* TODO views, rad
** TODO more of : count stuff in the left column(s)
*** St._columnHExprs: let the user add HExprs
Currently it's fixed at a single HExpr,
which indicates how many Rels or Tplts it's a top-level member of.
*** let each HExpr column can be given a title
by changing columnHExprs to Map String [HExpr]
*** let each buffer keep its own list of HExprs
** TODO reduce redundancy in views
this
  <complex expr>
    it #is _
      <complex expr> #is <condition 1>
could be reduced to this
  <complex expr>
    it #is _
      it #is <condition 1>
** a way to kill buffers
** TODO marking things in a tree
*** buffer nicknames
Let the user add a nickname to a buffer,
and then switch to that buffer via the nickname.
Begin with some auto-generated nicknames (numbers? letters?).
*** batch add
Toggle a checkbox window at the side of the main window.
Add (_isChecked :: Bool) to OtherProps.
Introduce an /each keyword for expression-insertion purposes.
** TODO update
*** manual update
*** automatic update
**** goal
Each time an Expr `a` is added,
test each search for whether it would include *only* `a`.
**** method
Call each layer in each ViewTree a "spot".
Each is associated with some kind of Hash expression `h`.
Decompose `h` into its constituents, and save those at the spot.

When an Expr `a` is added, break that into its constituents too.
Then, for each spot, create a Rslt `r` consisting of
(1) the constituents of `e`, and
(2) the constituents of the hash expression associated with that spot.
Now search r for h,
and add (in the map-insertion sense)
anything found to the contents already at h.
** store views
e.g. mark HostGroups as salient,
and store that info,
and permit viewing only the salient ones
** user language
show flag if condition holds
* crawling across Exprs
** Move faster by crossing over some views
When pressing left or right,
if there is a view collection like "ViewCenterRole" with no siblings,
do not stop on it.
Instead cross from its children to its parent, or vice-versa.
** "its members*" (with a star)
all members, submembers, etc -- probably nested
** maybe "its rels*" (with a star)
"maybe" because for certain Exprs that could explode
* crawling within an Expr
up|down to enclosing keyword (/hash, etc)
up|down to nearest higher binop (#, |, etc)
up|down, multipurpose
  this kind goes to either of the two previous kinds of things
left|right in same level
* Hash & maybe
** TODO ? _ #? _
_ #? _ means it could be any kind of binary relationship template.
_ #? _ #? _ could be any ternary, etc.
** TODO ? eventually, may need to test PRels for specificity too
The assumption is that a `PRel`
always refers to something reasonably specific,
because at the very least the template is determined.
But with more language features it might not be.
(And actually restricting to a certain member will in many cases yield fewer matches than restricting to a certain template.)

 Currently there exists `pExprIsSpecific`, but no `pRelIsSpecific`.
   (`pExprToHExpr` calls `pExprIsSpecific` to find whether conversion is possible.)
   (`pRelToHExpr` calls `pExprIsSpecific` to find which branches to convert.)
** TODO ? rather than convert PRel to HExpr
-- just convert it to PMap
pRelToPExpr :: PRel -> Either String PExpr
pRelToPExpr Absent = Left "pRelToPExpr: cannot convert Absent."
pRelToPExpr (PNonRel pnr) = pExprToHExpr pnr
pRelToPExpr (Closed ms js) =
 * TODO Qseq, the search metalanguage
** TODO ? It might be bad that varTestlike ForSomes do not store what they find in the Subst
** TODO ? define not just Sets, but Set-valued functions of Substs
Example (for a singleton Subst): define "ancestors-via-is" as a function of a Var v: It finds everything v' such that (v is v') or (v' is v), then every v'' such that (v'' is v') or (v' is v'') for one of the v's, etc.
This allows the set-valued function of v to be referred to by subsequent Queries, without having to recompute the set.
** TODO ? searches that take both Subst and Possible arguments
** TODO ? solve: mkVTestIO': naming errors cause silent failure
*** See the comment leading its definition for detail.
*** TODO why it's tricky
It would require introducing a type for checking input-output relationships.
Otherwise there is no record of the names used by the input and the output for validProgram to refer to.
* TODO re. Rslt
** TODO transitive search
*** DONE rethinking purpose
**** problem: HExpr finds Exprs; while transitive search finds pairs
Those pairs might be explicitly in the graph, but might not.
**** `reachable` will be easier to implement than `transitiveRels`
When running `reachable`,
which takes no fixed terminal arguments,
you want the whole lot (including starting points).
**** `transitiveRels` resembles `HEval`
When running `transitiveRels`,
which fixes start and end Exprs,
you probably want one or the other --
show me each of these starts that can reach one of these ends,
or each end that can be reached from some start.
But you might want both.

It would therefore be natural to include a [Role] argument to HTrans.
Unlike HEval, which takes a [RolePath],
these "paths" are necessarily length 1,
and there are only two possibilities: RoleMember 1 and RoleMember 2.
Also, confusingly,
*they don't index into the members of a relationship in the graph*;
they index into a pair constructed by `transitiveRels`.
*** TODO pTrans parser
*** TODO orphans
**** TODO ? could introduce type TransRole = TransLeft | TransRight
to limit the possible values in the list argument of PTrans (because,
e.g., RoleMember 3 or RoleTplt make no sense)
**** TODO efficiency: transitiveRels might, but HTrans does not have to search exahstively
See TODO comment under the HTrans clause of hExprToAddrs.
transitiveRels does have to find every pair if, for example, it's computing a transitive closure (as will be needed to oganize contents on-screen).
**** TODO Safety: check for cycles when someone adds an expression

**** TODO the transitive rel functions should take (SearchDir, Tplt) pairs
 rather than a single SearchDir and multiple Tplts.
 But this can wait until I need that.
**** TODO store, for each rel, the better traversal direction
Maybe use QuickCheck to automate the discovery of that direction.
  Run in the background each time a new
  instance of a transitive relationship is added.
The user should still be able to specify direction if needed.
  It's conceivable that a relationship might usually be best traversed left,
  but not always.
*** thinking | difficulties
**** two-template transitivity
***** "(x #is y) #and (y #(is subclass of) b) ##implies x #is z
**** equals, isa, is | hasq(uality), hasa
**** kinds of order
linear (schedule) vs. branching (dependency)
overlapping
topological sort
**** reflexivity is, so far, implicit
"Transitive" in Hode really means "transitive + reflexive".
*** done | stale
**** DONE the algorithm
***** use Hode.Data.Map.compose
***** DONE easiest algorithm: user chooses which way to search
 Given sets X and Y, we want all (x,y) s.t. x < y.
 wolog, suppose the user chooses to search "increasing|rightward".
 Define (\) to be the set difference operator:
 X \ Y is the set X, minus its intersection with Y.

 Let X1 be all n such that for some x in X \ Y,
   (x < n) is (explicitly) in the graph,
 and let pred_1 :: X1 -> 2^X map every x1 in X1 to {x in X s.t. x < x1).
   (Use Hode.Hash.HLookup.)
 Let X2 be all n such that for some x in X1 \ Y, (x < n) is in the graph,
 and pred_2 :: X2 -> 2^X map every x2 in X2 to {x in X s.t. x < x2).

 Similarly, build sets X3, X4 ... Xn,
 and functions pred_3, pred4 ... pred_n,
 such that X(n+1) would be the first empty one.

 Define XM = X union X1 union ... union Xn.
 Define earliestAncestors :: XM -> X.
 (If x is in X, then x is in `earliestAncestors x`,
 but it might not be the only member.)

 Find I = XM intersect Y.
 For each y in I,
 for each x in `earliestAncestors y`,
 include (x,y) in the answer.
***** goal
 The search might be "reflexive" (<=) or not (<).
 Given two sets X and Y, we search left from X, right from Y,
 for a set P = {(x,y) : x (<=|<) y}.
**** goal: transitive search
 If "brilliant #(is a kind of) bright",
 I should be able to search for everything that #is bright,
 and have brilliant things returned,
 without needing them to be labeled bright.
**** method
***** TODO ? Build-in some Exprs
 Phrase "transitive"
 Tplt "_ is _"
***** Search query format: unchanged
 They look just like they used to.
 But if "_ x _" is transitive, then searching for "/any #x y"
 will (potentially) return more stuff.
***** TODO better: hand this work off to some existing library
****** basic idea
 Find all the xs and all the ys.
 Use the graph (whose nodes are addresses) induced by the #r relationship.
****** TODO There are haskell bindings for a few graph querly langs now
 gremlin
 graphql
 pangraph
 cayley
****** graphite, Graphalyze look good
 *graphite* uses hash maps
 *Data.Core.Graph* "is fast, efficient", uses IntMap
 Data.Graph.Comfort uses Data.Map, but it's a one-page library
 digraph - hashmaps, three modules
****** if x is /any but y is specific (or vice-versa)
 Compute `Data.Graph.reachable y` for every value of y.
***** nah - hand-write the search algorithm for "x #r y"
****** If x is /any but y is specific (or vice-versa)
 Find everything that would be in "x #r y" without transitivity.
 Call that s1.
 For each (m1 #r y) in s1, search for "/any #r m1",
 and call the result "m2 #r m1".
 Call the set { m2 #r y } "s2 of y".
 Repeat: for each m2 in (s2 of y), search for "/any #r m2",
 and call each result "m3 #r m2" ...
 Eventually, end up with a bunch of relationships of the form "x #r y".
****** If neither is specific
 Fuck that. Just return what's been getting returned already,
 which is just the first-order (ignoring transitivity) relatinoships.
 To return all the transitive relationships
 would be both hard for the programmer and useless for the user.
****** *DOPE* If both are specific
 Let X = {x} and Y = {y}
 Create an empty map M from X to Y.

 Let X1 be all the values reachable from X in one rightward hop.
 Create a map L1 (L stands for left) from X1 to X,
 indicating which members are connected.
 For every y in both X1 and Y, add (L1 y, y) to M.

 Let Y1 be all values reachable from Y in one leftward hop.
 Create a map R1 (R stands for right) from Y1 to Y.
 For every x in both Y1 and X, add (x, R1 x) to M.
 *NEW at this step*: For every x in both Y1 and X1, add (L1 x, R1 x) to M.

 Let X2 be all values reachable from X1 in one rightward hop.
 *NEW IDEA* Using L1, create a map L2 from X2 to X.
 For each y in both X2 and Y, add (L2 y, y) to M.
 For each y in both X2 and Y1, add (L2 y, R1 y) to M.

 This has to go on until both forests are completely mapped.
***** wart: What if you don't want to use the transitivity?
****** fortunately there's a hack that solves it
 The user can just temporarily delete the transitivity property for that Tplt.
****** the problem
 If "_ x _ " is transitive, and one searches for "/_ #x /_",
 the user probably just wants to see all the first-order x relationships,
 not the compound ones.

 This suggests either treating that (and similar?!) case specially,
 or letting the user ask not to use the transitivity.
**** suspicions
***** The functions in Hash.HLookup deserve complication for transitivity.
 Hash, after all, is the query language,
 and in that language transitive search is a distinct concept.
** TODO ordered display
(See also "transitive search".)
*** goal
The user should be able to ask to rank by any number of transitive Tplts.
Preference should be lexicographic across the Tplts.
*** how
"topological sort"
`topsort` from FGL should work.
** TODO reflexivity
** TODO HExpr: add a symbol for "involves"
*** the current (slow, incomplete) hack
**** what it is
Use an HMap that looks for whether the known thing is the template or the 1st, 2nd, 3rd member of the search target. This is the default column shown in the Results buffers.
**** why it's not great
It checks for things redundantly.
It would miss any members of an arity-4 relationship (if they existed).
*** what it means
A Tplt involves all its joints.
A Rel involves its template and all its members.
*** PITFALL : Involves does not play nicely with pathsToIts
Even the Involves that only goes 1 layer deep is confusing.
Once it is implemented, Paths need to not be integers lists;
they will have to be lists of (Integer | Wildcard),
where a Wildcard stands for "any number could go here".
*** Add involves*

** (#fast) isIn ought to return two maps, not a set
a map from Role to Set Addr
   because the item in question often holds the same Role in multiple Exprs
a map from Addr to Set Role
   because the item in question could (although this will be rare) hold
   multiple Roles within the same Expr
** ? To avoid redundant tree-climbing
Recursive calls to a function that evaluates something at an ExprImg by first evaluating it along each of its branches could be expensive.
It could be avoided by making the ImgExpr abstract, a functor over some parameter a that is paired with each constructor.
* ? how to make variable collision avoidance easier?
Consider QAnd [ Find child of some x, Test equal to no x].
That's an existential find followed by a universal test over the same variable. The find binds x, then the Test deletes that binding.
The solution is to change the varName in the Test. This puts, however,
an annoying burden on the user.
* ? safety, speed
** ? someone else wrote a tree editor
https://cs-syd.eu/posts/2019-06-28-microsmos
and then a forest editor:
https://cs-syd.eu/posts/2019-08-28-millismos
** ? use lists rather than sets until needed
e.g. in HExprToAddrs, or the RLookup functions.
That is, unless set fusion works as well.
** there are some list-set mismatches
rightReachable, for instance, uses lists, because it's fast.
But it has to convert the output of hExprToAddrs to a list, using Set.toList.
It would be nice if a version of hExprToAddrs existed that used lists, not sets.
** for jumping around the view
Could include in the St a map from Addr to Path, so that a user can ask to jump straight to the View corresponding to a given Addr.
(If it's in the buffer multiple times, cycle between them.)
** if moving focus ever gets slow
replace those vectors of subviews with zippers
** redundant cases should be last among definitions
example: In this:
    pExprToHExpr :: PExpr -> Either String HExpr
    pExprToHExpr px@(pExprIsSpecific -> False) = Left
      $ "pExprToHExpr: " ++ show px ++ " is not specific enough."
    pExprToHExpr Any =
      Left $ "pExprToHExpr: Any is not specific enough."
I only wrote the Any case to make GHCI not issue a warning.
It should come last.
** use lists in some places for fusion, short-circuiting, instead of maps, sets
Example: mapping over a map, and then looking for lefts, is slower than turning the map into a list, mapping over the list, and short-circuiting at the first Left.
hExprToAddrs (the Hash language find routine) called on the HMap constructor, for instance, does this.
** speed when asking for multiple variables that determined a given one
For varPossibilities, just use the unconditional found values.
For the input-output criteria, just use VarTest.
*** once that's complete, ditch some unused functions in Subst.hs
*** for more speed, while still pretty simple
(*much* simpler than the input-output-matching varPossibilities strategy I was working on)

Track inputs and outputs.
Then, to cut down on the number of varPossibilities tried, allow the user to ask for one flavor (variable name) of input or output to one found Query result.
Any additional input-output-matching criteria are imposed via VarTest.

How inputs are tracked (already true):
  Look up a result Var in the Possible.
  In the resulting CondElts, look up a value for the same Var.
  This produces all the possible Substs that could lead there.
How outputs could be tracked:
  Look up an input Var in the Possible.
  In the resulting [?], Look up a value of that Var.
  In the resulting [?], look up the output Var.
  This produces all the possible values that input value could cause in the output.
** speed|space optimization
*** skip recording unneeded dependent bindings
You can tell from reading a Program's [ (VarFunc, Query) ] argument which elements of the Substs will never be referred to; those would not have to be recorded.
** todo ? safety : check that every Set in a CondElts is nonempty
** ? test mixed queries more
*** a ForAll with a ForSome condition
*** a ForAll with a ForAll condition
** test pathsToIts_*, eval
* far off
** synthetic templates
_ is a member of _" is a "synthetic" template. There might be others.
** relationship equivalence
** programmatic edits ("do _ to everything that satisfies _")
** show a recursive statement without exploding
** hard : text-to-hexpr|expr correspondence
** buffer ring
From the Buffer Tree view, allow the user to mark buffers with unique integer indexes.
To move "right" in the buffer ring is to move to the buffer with the least index greater than the current one, and left to the one with the greatest index less than, except wrapping at the edges.
* TODO collect use cases
** view notes from a text ordered by source text or topic
* bugs
** meh: the empty unary relationship
"# x" is treated the same as "x #"
and it displays the same as "x"
* DONE ? overly cautious
** fancy alternatives to Either
 Matt Parsons's magic generic-lens strategy:
   https://www.parsonsmatt.org/2018/11/03/trouble_with_typed_errors.html
 more:
   https://www.fpcomplete.com/blog/defining-exceptions-in-haskell
** more safety with PTree focus
*** a function to check the validity of its focii fields
*** focusPorestOnFocusedPTree
A Porest is a list of PTrees.
Exactly one of those PTrees should have focus.
This function would move the focus of the Porest to align with the first PTree that has focus.
* DONE explaining some design decisions
** why the focus within the Results window is coded by hand
(where "by hand" = instead of using Brick's built-in focus concept).
*** in brief
Brick's "focus" selects among named Widgets.
Few things can be named: lists, editors, viewports and `cached`s.
In particular, a strWrap cannot be.

I could wrap the strWrap in a List, but that feels awkward.
*** things that can be named
cached
**** these won't work for holding a single widget
editor
viewport -- would be infinite-sized, because nested
* DONE ? obvious|stale
** untested : Hode.Util.PTree.writeLevels
** forall and exists clauses for variable functions of variables
*** Example
 [ (X, ..)
   (Y,              Exists [X] $ ...)
   (W, Exists [Y] $ ForAll [X(Y)] ...)
   (V, Exists [Y] $ Exists [X(Y)] ...) ]
*** Analysis
 Y, W and V all quantify across some set of Xs.
 Y quantifies existentially across all the Xs.
   It draws those X values from the result of the X query.
 W and V quantify across only those Xs associated with the Y in question.
   They both draw X values the results of the Y query, not the X query.
** the "Hera's grandchild and not Zeus's child" query
*** query
 X <- every child of Zeus
 Y <- every child of Hera
 Z <- every child of some Y s.t. for all X, X /= Y
*** representation
 [ (X, QFind <child of Zeus> )
 , (Y, QFind <child of Hera> )
 , (Z, QForSome [Y] $ QAnd [ QFind <child of Y>
                           , QForAll [X] $ QTest <Y /= X> ] ) ]
*** algorithm
 For X: do it.
 For Y: do it.
 For Z: For each possible binding of Y
   for each C among the children of Y
     for each possible binding of X -- At this point the subst'n uses 2 vars.
       test whether X == Y
       if at any point they are equal, abort
     if that innermost loop never aborted
       add* the following association the Z-result:
         (Var "C" = C) -> (Var "Y" = Y)
         * where by "add" I mean use insertWith to add (Var "Y" = Y) to the
          set of possible bindings that make (Var "C" = C) valid..
** a variable (here, X) can be quantified existentially in one place and universally in another
*** query
 X <- in children(Zeus)
 Y <- in children(Hera)
 Z <- for some Y, in children(Y)
      & for all X, not equal to X
 W <- for some X, in children(X)
      & for all Z, for all Y(Z), not( has_battled( W, Y(Z) ) )
        Need two forall statements here because Y(Z) is meaningless until Z has a binding.
** disjunctions can make a variable's dependencies on other variables depend on the first one's value
*** The problem
 X <- children of Thor
 Y <- children of Malox
 Z <- for some Y, Z knows Y
      or for some X, Z knows X
 These are every person who knows a child of Thor or a child of Malox. For some values of Z, Y is defined and X not; for other values of Z, X is defined and Y not.
*** It can be solved by rewriting the query
 X <- children of Thor
 Y <- children of Malox
 W <- X or Y
 Z <- for some W, Z knows W
*** The first (problematic) query should be valid
*** But in that case certian result requests are meaningless
The user cannot ask for X(Z) or Y(Z).
*** Only common dependencies survive disjunction
When taking the disjunction of two queries, retain any variable dependencies that are defined for every member of the disjunction.
So, for instance, if one query is dependent on nothing, then no variable dependencies will be recorded.
*** A simple solution
In the course of binding variable X, only those bindings the binding depends on will be recorded.
This means, for instance, that there might be one value of X dependent on a binding for Y and not on Z, and another binding of X dependent on Z but not on Y.
When the user asks for a binding of X that depends on the binding of Y, any binding of X that does not depend on Y will be skipped.
** temporary user burdens: query order, dependency validity
Eventually the code should be able to determine which queries depend on which others, and whether a sequential solution exists.
* misfiled: lens tricks
** `partsOf` is cool
https://www.reddit.com/r/haskellquestions/comments/bz5dmp/how_to_implement_b_a_a_a_b_b/
